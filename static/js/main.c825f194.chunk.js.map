{"version":3,"sources":["components/app/app-styles.ts","components/app/app.tsx","reducers/root-reducer.ts","views/root.tsx","serviceWorker.ts","index.tsx"],"names":["appStyles","createStyles","root","flexGrow","menuButton","marginRight","title","padding","paddingLeft","qrReader","display","margin","width","height","maxWidth","maxHeight","qrOutput","textAlign","paddingTop","_App","props","handleError","err","console","error","handleScan","data","setState","result","state","bind","classes","this","className","delay","onError","onScan","style","React","App","withStyles","connect","rates","exchangeRates","rootReducer","combineReducers","type","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","Root","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAIaA,EAAYC,YAAa,CAClCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAa,QAEjBC,MAAO,CACHH,SAAU,EACVI,QAAS,OACTC,YAAa,QAEjBC,SAAU,CACNC,QAAS,QACTC,OAAQ,OACRC,MAAO,OACPC,OAAQ,OACRC,SAAU,IACVC,UAAW,KAEfC,SAAU,CACNN,QAAS,QACTE,MAAO,OACPK,UAAW,SACXC,WAAY,M,iBCVdC,E,YACF,WAAYC,GAAmB,IAAD,8BAC1B,4CAAMA,KAMVC,YAAc,SAACC,GACXC,QAAQC,MAAMF,IARY,EAW9BG,WAAa,SAACC,GACNA,GAAQ,EAAKC,SAAS,CAAEC,OAAQF,KAVpC,EAAKG,MAAQ,CAAED,OAAQ,aACvB,EAAKP,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAJQ,E,sEAepB,IACEC,EAAYC,KAAKZ,MAAjBW,QACAH,EAAWI,KAAKH,MAAhBD,OACR,OACI,uBAAKK,UAAWF,EAAQ7B,MACpB,uBAAK+B,UAAWF,EAAQtB,UACpB,gBAAC,IAAD,CACIyB,MAAO,IACPC,QAASH,KAAKX,YACde,OAAQJ,KAAKP,WACbY,MAAO,CAAEzB,MAAO,WAGxB,qBAAGqB,UAAWF,EAAQf,UAAtB,WAAyCY,Q,GA7BtCU,aAmCbC,EAAMC,YAAWxC,EAAXwC,CAAsBrB,GAMnBsB,mBAJf,SAAyBZ,GACrB,MAAO,CAAEa,MAAOb,EAAMc,iBAGXF,CAAyBF,GClDxC,IAEeK,EAFKC,YAAgB,CAACF,cAPrC,WAAsD,IAA/Bd,EAA8B,uDAAjB,GAGxB,OAHyC,wCAClCiB,KAEAjB,KCGbkB,EAAmBC,yBAEnBC,EAAQC,YACVN,EACAO,YACIC,IACAL,IAIaM,E,iLAEjB,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,W,GAJ0BK,aCNdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c825f194.chunk.js","sourcesContent":["import { createStyles } from '@material-ui/core'\nimport { CSSProperties } from '@material-ui/styles'\nimport { Z_BLOCK } from 'zlib'\n\nexport const appStyles = createStyles({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: '20px',\n    },\n    title: {\n        flexGrow: 1,\n        padding: '16px',\n        paddingLeft: '24px'\n    },\n    qrReader: {\n        display: 'block',\n        margin: 'auto',\n        width: '100%',\n        height: '100%',\n        maxWidth: 500,\n        maxHeight: 500\n    },\n    qrOutput: {\n        display: 'block',\n        width: '100%',\n        textAlign: 'center',\n        paddingTop: 20\n    }\n})","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { WithStyles, withStyles } from '@material-ui/core'\nimport { appStyles } from './app-styles'\nimport QrReader from 'react-qr-reader'\n\nexport interface _AppFieldProps {\n}\n\nexport interface _AppDispatchProps {\n}\n\ninterface _AppProps extends _AppFieldProps, _AppDispatchProps, WithStyles<typeof appStyles> {}\n\ninterface _AppState {\n    result: string\n}\n\nclass _App extends React.Component<_AppProps, _AppState> { \n    constructor(props: _AppProps) {\n        super(props)\n        this.state = { result: 'NO RESULT' }\n        this.handleError = this.handleError.bind(this)\n        this.handleScan = this.handleScan.bind(this)\n    }\n\n    handleError = (err: any) => {\n        console.error(err)\n    }\n\n    handleScan = (data: string | null) => {\n        if (data) { this.setState({ result: data }) }\n    }\n\n    render() {\n        const { classes } = this.props\n        const { result } = this.state\n        return (\n            <div className={classes.root} >\n                <div className={classes.qrReader} >\n                    <QrReader\n                        delay={300}\n                        onError={this.handleError}\n                        onScan={this.handleScan}\n                        style={{ width: '100%' }}\n                    />\n                </div>\n                <p className={classes.qrOutput}>Output: {result}</p>\n            </div>\n        )\n    }\n}\n\nconst App = withStyles(appStyles)(_App)\n\nfunction mapStateToProps(state: any) {\n    return { rates: state.exchangeRates }\n}\n\nexport default connect(mapStateToProps)(App)","import { combineReducers } from 'redux'\n\nfunction exchangeRates(state: any = {}, action: any) {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({exchangeRates})\n\nexport default rootReducer","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport App from '../components/app/app'\nimport rootReducer from '../reducers/root-reducer'\n\nconst loggerMiddleware = createLogger()\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        loggerMiddleware\n    )\n)\n\nexport default class Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    )\n  } \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Root from './views/root'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}